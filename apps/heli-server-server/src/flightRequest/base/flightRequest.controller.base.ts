/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FlightRequestService } from "../flightRequest.service";
import { FlightRequestCreateInput } from "./FlightRequestCreateInput";
import { FlightRequest } from "./FlightRequest";
import { FlightRequestFindManyArgs } from "./FlightRequestFindManyArgs";
import { FlightRequestWhereUniqueInput } from "./FlightRequestWhereUniqueInput";
import { FlightRequestUpdateInput } from "./FlightRequestUpdateInput";

export class FlightRequestControllerBase {
  constructor(protected readonly service: FlightRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FlightRequest })
  async createFlightRequest(
    @common.Body() data: FlightRequestCreateInput
  ): Promise<FlightRequest> {
    return await this.service.createFlightRequest({
      data: data,
      select: {
        createdAt: true,
        date: true,
        id: true,
        time: true,
        updatedAt: true,
        windTurbineStatus: true,
        wtgCode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FlightRequest] })
  @ApiNestedQuery(FlightRequestFindManyArgs)
  async flightRequests(
    @common.Req() request: Request
  ): Promise<FlightRequest[]> {
    const args = plainToClass(FlightRequestFindManyArgs, request.query);
    return this.service.flightRequests({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        time: true,
        updatedAt: true,
        windTurbineStatus: true,
        wtgCode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FlightRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async flightRequest(
    @common.Param() params: FlightRequestWhereUniqueInput
  ): Promise<FlightRequest | null> {
    const result = await this.service.flightRequest({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        time: true,
        updatedAt: true,
        windTurbineStatus: true,
        wtgCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FlightRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFlightRequest(
    @common.Param() params: FlightRequestWhereUniqueInput,
    @common.Body() data: FlightRequestUpdateInput
  ): Promise<FlightRequest | null> {
    try {
      return await this.service.updateFlightRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          id: true,
          time: true,
          updatedAt: true,
          windTurbineStatus: true,
          wtgCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FlightRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFlightRequest(
    @common.Param() params: FlightRequestWhereUniqueInput
  ): Promise<FlightRequest | null> {
    try {
      return await this.service.deleteFlightRequest({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          time: true,
          updatedAt: true,
          windTurbineStatus: true,
          wtgCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
